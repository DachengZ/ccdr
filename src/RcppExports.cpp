// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gridCCDr
List gridCCDr(NumericVector cors, List init_betas, unsigned int nn, NumericVector lambdas, NumericVector params, int verbose);
RcppExport SEXP ccdr_gridCCDr(SEXP corsSEXP, SEXP init_betasSEXP, SEXP nnSEXP, SEXP lambdasSEXP, SEXP paramsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cors(corsSEXP );
        Rcpp::traits::input_parameter< List >::type init_betas(init_betasSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP );
        List __result = gridCCDr(cors, init_betas, nn, lambdas, params, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// singleCCDr
List singleCCDr(NumericVector cors, List init_betas, unsigned int nn, double lambda, NumericVector params, int verbose);
RcppExport SEXP ccdr_singleCCDr(SEXP corsSEXP, SEXP init_betasSEXP, SEXP nnSEXP, SEXP lambdaSEXP, SEXP paramsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cors(corsSEXP );
        Rcpp::traits::input_parameter< List >::type init_betas(init_betasSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP );
        List __result = singleCCDr(cors, init_betas, nn, lambda, params, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
